#!/usr/bin/env python3
import os
import inquirer
import yaml
import sys
import subprocess
import re
import math
import json
from datetime import datetime, timedelta


def load_yaml_data():
    with open('kyrax.yaml', 'r') as file:
        return yaml.safe_load(file)


def save_yaml_data(data):
    with open('kyrax.yaml', 'w') as file:
        yaml.dump(data, file, sort_keys=False)


def create_habit():
    print("\nCreating habit:\n")
    questions = [
        inquirer.Text('name', message="? Title"),
        inquirer.Text('value', message="? EXP"),
        inquirer.List('action',
                      message="? What's next?",
                      choices=['Submit', 'Cancel'])
    ]
    answers = inquirer.prompt(questions)
    if answers is None or not answers['action']:
        print("\nError: Habit Creation::create_habit()")
    elif answers['action'] == 'Submit':
        data = load_yaml_data()
        new_id = max(habit['id'] for habit in data['habit_data']) + 1 if data['habit_data'] else 1
        new_habit = {
            'id': new_id,
            'name': answers['name'],
            'value': int(answers['value']),
            'compounded_value': int(answers['value']),
            'last_executed': datetime.now().strftime('%Y-%m-%d')
        }
        data['habit_data'].append(new_habit)
        save_yaml_data(data)
        print(f"\nHabit '{answers['name']}' added successfully!")
    else:
        print("\nOperation canceled.")


def track_habit():
    data = load_yaml_data()
    habit_data = data['habit_data']
    today = datetime.now().date()
    questions = [
        inquirer.Checkbox(
            "habits",
            message="? What would you like to choose?",
            choices=[
                (f"{habit['id']}. {habit['name']} (EXP {habit['value']})", habit) for habit in habit_data
            ],
        ),
    ]
    answers = inquirer.prompt(questions)
    if answers is None or not answers['habits']:
        print("\nNo habits selected")
        return

    total_xp = 0
    print("\nSelected habits:")
    for habit in answers['habits']:
        last_executed = datetime.strptime(habit['last_executed'], '%Y-%m-%d').date()
        days_since = (today - last_executed).days
        if days_since == 1:
            compounded_value = round(habit['compounded_value'] * 1.025)
            xp_gain = compounded_value
            habit['compounded_value'] = compounded_value
            print(f"{habit['id']}. {habit['name']} (Compounded EXP: {xp_gain}!)")
        else:
            xp_gain = habit['value']
            habit['compounded_value'] = habit['value']
            if days_since == 0:
                print(f"{habit['id']}. {habit['name']} (EXP {xp_gain}) - Already tracked today")
            else:
                print(f"{habit['id']}. {habit['name']} (EXP {xp_gain}) - Reset streak")
        habit['last_executed'] = today.strftime('%Y-%m-%d')
        total_xp += xp_gain
    data['character']['current_xp'] += total_xp
    save_yaml_data(data)
    print(f"\nAdded {total_xp} XP to your character!")
    print(f"Total XP: {data['character']['current_xp']}/{data['character']['xp_to_next_level']}")
    if data['character']['current_xp'] >= data['character']['xp_to_next_level']:
        print("\nLEVEL UP AVAILABLE!")


def close_issue(issue_number):
    try:
        # First close the GitHub issue and handle rewards (existing functionality)
        view_result = subprocess.run(
            ["gh", "issue", "view", issue_number, "--json", "title"],
            capture_output=True, text=True, check=True
        )
        issue_data = json.loads(view_result.stdout)
        title = issue_data.get('title', '')
        if not title:
            print("Error: Could not retrieve issue title")
            return

        subprocess.run(
            ["gh", "issue", "close", issue_number],
            capture_output=True, text=True, check=True
        )
        print(f"✓ Closed issue #{issue_number} ({title})")

        # Search through all YAML files in ./assets/ for matching gh_issue
        assets_dir = "./assets"
        if os.path.exists(assets_dir) and os.path.isdir(assets_dir):
            for filename in os.listdir(assets_dir):
                if filename.endswith(".yaml") or filename.endswith(".yml"):
                    filepath = os.path.join(assets_dir, filename)
                    try:
                        with open(filepath, 'r') as file:
                            data = yaml.safe_load(file)
                        
                        updated = False
                        # Search through all levels and projects
                        if 'levels' in data:
                            for level in data['levels']:
                                if 'projects' in level:
                                    for project in level['projects']:
                                        if 'gh_issue' in project and str(project['gh_issue']) == str(issue_number):
                                            project['state'] = "unlocked"
                                            updated = True
                                            print(f"✓ Updated project '{project['name']}' in {filename} to 'unlocked'")
                        
                        # Save the file if we made changes
                        if updated:
                            with open(filepath, 'w') as file:
                                yaml.dump(data, file, sort_keys=False)
                    except Exception as e:
                        print(f"⚠️  Error processing {filename}: {str(e)}")

        # Rest of the existing functionality (stats, XP, etc.)
        patterns = {
            'str': re.IGNORECASE, 'dex': re.IGNORECASE, 'const': re.IGNORECASE,
            'int': re.IGNORECASE, 'wis': re.IGNORECASE, 'char': re.IGNORECASE
        }
        matches = {
            key: re.search(fr"{key}\s+(\d+)", title, flags)
            for key, flags in patterns.items()
        }

        data = load_yaml_data()
        updated = False
        for stat, match in matches.items():
            if match:
                val = int(match.group(1))
                data['stats'][stat]['value'] += val
                print(f"  + Added {val} {stat.upper()}")
                updated = True

        if updated:
            save_yaml_data(data)
            print("\nCharacter stats updated!")
            for stat, info in data['stats'].items():
                print(f"  - {stat.upper()}: {info['value']}")

        questions = [
            inquirer.List(
                'difficulty',
                message="? What difficulty would you like to choose?",
                choices=[
                    ('Easy.   K = 10', 'easy'),
                    ('Medium. K = 5',  'medium'),
                    ('Hard.   K = 3',  'hard'),
                ]
            )
        ]
        ans = inquirer.prompt(questions)
        if not ans or 'difficulty' not in ans:
            print("No difficulty selected, skipping XP award.")
            return

        K_map = {'easy': 10, 'medium': 5, 'hard': 3}
        K = K_map[ans['difficulty']]

        cur_lvl = data['character'].get('level', 1)
        next_xp_threshold = 110 * (cur_lvl + 1) ** 2
        cur_xp_threshold  = 110 * (cur_lvl) ** 2
        xp_gain = int(round((next_xp_threshold - cur_xp_threshold) / K))

        data['character']['current_xp'] += xp_gain
        save_yaml_data(data)
        print(f"\n  + Added {xp_gain} XP for {ans['difficulty'].capitalize()} difficulty (K={K})")
        print(f"Current XP: {data['character']['current_xp']}")

    except subprocess.CalledProcessError as e:
        print(f"Error closing issue: {e.stderr}")
    except Exception as e:
        print(f"Error: {str(e)}")

def fetch_issue_data(issue_number):
    try:
        result = subprocess.run(
            ["gh", "issue", "view", issue_number, "--json", "title,body,labels"],
            capture_output=True, text=True, check=True
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error fetching issue: {e.stderr}")
        return None
    except Exception as e:
        print(f"Error: {str(e)}")
        return None


def add_challenge(issue_number):
    issue_data = fetch_issue_data(issue_number)
    if not issue_data:
        print(f"Failed to fetch issue #{issue_number}")
        return

    data = load_yaml_data()

    if 'challenges' not in data:
        data['challenges'] = []

    if any(challenge['id'] == int(issue_number) for challenge in data['challenges']):
        print(f"Challenge #{issue_number} already exists")
        return

    # Ask for difficulty
    questions = [
        inquirer.List(
            'difficulty',
            message="? What difficulty would you like to assign to this challenge?",
            choices=[
                ('Easy.   K = 10', 'easy'),
                ('Medium. K = 5',  'medium'),
                ('Hard.   K = 3',  'hard'),
            ]
        )
    ]
    ans = inquirer.prompt(questions)
    if not ans or 'difficulty' not in ans:
        print("No difficulty selected. Aborting.")
        return

    K_map = {'easy': 10, 'medium': 5, 'hard': 3}
    difficulty = ans['difficulty']
    k_factor = K_map[difficulty]

    new_challenge = {
        'id': int(issue_number),
        'title': issue_data.get('title', ''),
        'body': issue_data.get('body', ''),
        'labels': [label['name'] for label in issue_data.get('labels', [])],
        'start_date': datetime.now().strftime('%Y-%m-%d'),
        'difficulty': difficulty,
        'k_factor': k_factor
    }

    data['challenges'].append(new_challenge)
    save_yaml_data(data)
    print(f"Added challenge #{issue_number}: {new_challenge['title']} (Difficulty: {difficulty}, K={k_factor})")


def check_level():
    data = load_yaml_data()
    current_xp = data['character']['current_xp']
    current_level = data['character'].get('level', 1)
    new_level = int(math.sqrt(current_xp / 110))

    if new_level > current_level:
        data['character']['level'] = new_level
        data['character']['xp_to_next_level'] = 110 * ((new_level + 1) ** 2)
        save_yaml_data(data)
        print(f"\n🎉 Congratulations! You've reached Level {new_level}! 🎉")
        print(f"⭐ Next Level at: {data['character']['xp_to_next_level']} XP")


def print_help():
    print("\nky create   # Create new Habits")
    print("ky habit    # Track habits for today")
    print("ky close <issue-number>  # Close GitHub issue and claim rewards")
    print("ky challenge <issue-number>  # Add GitHub issue as a challenge")


def main():
    if len(sys.argv) > 1:
        cmd = sys.argv[1]
        if cmd == "create":
            create_habit()
        elif cmd == "habit":
            track_habit()
        elif cmd == "close" and len(sys.argv) > 2:
            close_issue(sys.argv[2])
        elif cmd == "challenge" and len(sys.argv) > 2:
            add_challenge(sys.argv[2])
        elif cmd == "help":
            print_help()
        else:
            print_help()
    else:
        print_help()
    check_level()


if __name__ == "__main__":
    main()

